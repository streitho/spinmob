#summary A few things to try right away.

= Install and Run =

(1) Install [http://www.python.org/ python], [http://www.scipy.org scipy and numpy], [http://matplotlib.sourceforge.net matplotlib], and [http://www.wxpython.org wxpython] (telling it to generate the tool scripts during install if possible). Then drop the spinmob source folder into your [SitePackages python site-packages] directory.

(2) [PyShell Start pyshell].

(3) `>>> import spinmob`

= A Few Commands to Hit the Ground Running =

In general, I tried to design this library so that everything running in the background starts with an underscore, such as "`_plotting`" or "`_numpy`". Everything the user (you) should play with does not. So essentially if there's something you want to do, try typing "spinmob." and navigating through the lists in pyshell to see what's available. There is additional functionality hidden in the underscore libraries but I have not tested these functions. They will make their way back into the main library as time progresses.

== Plotting ==

|| `>>> spinmob.plot_data([1,2,3],[1,5,4])` || Generate a simple data plot ||
|| `>>> spinmob.plot_data([[1,2,3],[1,2,3]], [[1,3,2],[4,1,3]])` || Generate a few data lines. ||
|| `>>> spinmob.plot_function(spinmob.math.sin)` || Plot sin(x) ||
|| `>>> spinmob.plot_function([spinmob.math.sin, spinmob.math.cos])` || Plot sin(x) and cos(x) ||
|| `>>> spinmob.tweaks.auto_zoom()` || Auto-scale the data. ||
|| `>>> spinmob.tweaks.ubertidy()` || Prepare the plot for presentation. (I save as ps and use [http://www.inkscape.org/ Inkscape]) ||
|| `>>> def f(x,y): return x*x*y*y` || to define a 2-variable function ||
|| `>>> spinmob.plot_surface_function(f,-1,1,-1,1)` || to make a 2-d color plot of this function. The GUI sliders are very useful, but do not work so well in Linux yet. I have to overhaul them ||

== Data Analysis ==

The most useful part of this project is the data importing and analysis library. I need to write the documentation for the types of data files it can read and include a test file before I tackle this section.

If you want to play with the class, start by doing something like this:

`>>> d = spinmob.data.standard()`

`>>> d.load_file()`

to point an instance of this class at a data file. Then try `d[0]` to view the 0-th column, `d.columns`, for the full list, `d.header` for the header values, `d.c()`, `d.h()`, and things like `d.get_new_column('2*c(0)', 'my column')` to manipulate the data. You can also save the manipulated data with `d.save_file()`

Data files can have any delimiter and should have a format something like:

{{{`why_do_this        example_data_file`
`start_pressure     42`
`end_pressure       37`
`type_of_sweep      voltage`
`header_value_4     3.23`
`my_row_of_whatever 32 44 55 128 223 147`
`more_values        15.2 22 37.45 18`

`time voltage current other_stuff`
`1    32.1    27.0    1`
`2    33.2    27.1    0`
`3    32.5    27.2    1`
`4    44.2    27.3    1`
`5    22.2    27.4    0`
`6    11.1    27.5    1`
`7    77.232  27.4    1`
`8    11.4    27.3    0`
`9    27.0    27.2    1`
`10   11.11   27.1    1`}}}


The default delimiter `spinmob.data.standard()` is looking for is white space, either spaces or tabs. White space will be stripped off the end of values, numbers will be converted to floating point, and strings are allowed as well. Empty lines are ignored, and lists of numbers will be converted into arrays. 

The only overall structural rule for data files, really, is that the header has to come first, and the data columns come last. Basically, lines starting with strings will be interpreted as headers, and then no more having strings once the numbers start pouring in!

more to come...