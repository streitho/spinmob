#summary Setting up the environment and getting started with spinmob.
#labels Featured

= Installing and Running =

1. Install all the packages.

Download and install [http://www.python.org/ python], [http://www.scipy.org scipy and numpy], [http://matplotlib.sourceforge.net matplotlib], and [http://www.wxpython.org wxpython] (telling it to generate the tool scripts during install if possible). If you don't care about long downloads or hard drive space, you can also get all of these packages in the [http://www.enthought.com/ enthought python distribution].

Then, if you have windows, you can use the spinmob windows installer from the downloads page. Otherwise, just make a "spinmob" folder in your [SitePackages python site-packages] directory and stick the source files there. You can either swipe the latest version from google's fancy SVN server (this is ideal) or get a less-frequently-updated version from the downloads section.

2. [PyShell Start pyshell].

3. From the command line, import spinmob and start playing:
{{{
>>> import spinmob as s
}}}

In all of the following we assuming spinmob is imported as "s".



= A Quick Tutorial =

In general, I tried to design this library so that everything running in the background starts with an underscore, such as "`_plotting`" or "`_numpy`". Everything the user (you) should play with does not. So essentially if there's something you want to do, try typing "spinmob." and navigating through the lists in pyshell to see what's available. There is additional functionality hidden in the underscore libraries but I have not tested these functions. They will make their way back into the main library as time progresses.

== Basic Data Handling ==

By far the most useful part of this project is the databox object. It handles the loading and saving of fairly arbitrary ascii data files, such as those generated by Labview. It can also be used as a place to organize and manipulate whatever data you like.

To see what databoxes can do, it's easiest to just create one and start playing with it. Here is a sample PyShell session showing how to add and access columns of data in databox.

First, create a databox and add a column of data, with the column name 'my_column':

{{{
>>> d = s.data.databox()
>>> d['my_column'] = [1,2,3]
}}}

The names of all the columns are stored in the ordered list d.ckeys. You can see what's available by checking this list:

{{{
>>> d.ckeys
['my_column']
}}}

You can access the data by name or by index:

{{{
>>> d['my_column']
array([1, 2, 3])
>>> d[0]
array([1, 2, 3])
}}}

You can also create columns by index; databox will auto-name them:

{{{
>>> d[1] = [10,20,11.5]
>>> d.ckeys
['my_column', '_column1']
>>> d['_column1']
array([10,20,11.5])
}}}

You can access and overwrite them by index or name interchangeably:

{{{
>>> d[1]
array([10,20,11.5])
>>> d[-1]
array([10,20,11.5])
>>> d[-2]
array([1, 2, 3])
>>> d[0] = d['my_column']/2
>>> d[0]
>>> array([0, 1, 1])
}}}

Heads up! These data columns are just numpy arrays, which follow all the numpy rules about integers.

{{{
>>> d[0] = s.array([1,2,3]) / 2.0
}}}

should fix that. :)




Now the databox has two columns. Try adding some header information:

{{{
>>> d.insert_header('test_header', 32)
>>> d.insert_header('test_header2', [1,"test",45.3])
>>> d.hkeys
>>> d.h('test_header')
>>> d.h('ader2')
}}}

Notice for headers you just need to specify enough of the string to distinguish it from the others. Now that we have a databox with some data in it, save it to a file:

{{{
>>> d.save_file()
}}}

Open up the file with a text editor and see what it looks like inside. Hopefully this makes sense. For saving and loading it is also possible to change the delimiter: 

{{{
>>> d.delimiter = ','
}}}

for example. By default, the delimiter is the python None object, which means "any white space".

You can also load similarly-formatted data files. Try loading the first one you saved:

{{{
>>> d2 = s.data.load()
>>> d2.hkeys
>>> d2[-1]
}}}

The only overall structural rule for data files, really, is that the header has to come first, and the data columns come last:

 * Header lines begin with strings and must come before the data columns.
 * Empty lines are ignored.
 * The first data row must be entirely comprised of numbers.
 * The columns can be different lengths or have placeholders with no data.

Play with it and see what you can get away with. Currently databox prefers equal-length columns, but we're working on that.

== Scripting ==

It is also possible to generate new columns of data using a databox script such as the following.

{{{
d.generate_column('3*c(0)+cos(c("my_column2")/h("test_header"))', 'my_new_column')
}}}

This will return 3 times the 0'th column plus the cosine of "my_column2" over header element "test_header", and insert the result into the databox as the column named "my_new_column". If this name is omitted, it will simply return the result.

The scripts are basically python syntax with a few additions. First, the scripts can see all the numpy functions like sin(), cos(), and sqrt(), along with the databox column and header query functions c() and h(). Second, you can write scripts with a new keyword "where", such as

{{{
>>> d.generate_column('cos(a*x*x) + b*x+45 where x=c(0); a=3.2; b=h("test_header")/2.0; c=c(1)')
}}}

This is mostly useful if you want to easily see the functional form and/or have a lot of long variable names. Often times scripts are much shorter when written this way.


== Plotting ==

|| `>>> s.plot.data([1,2,3],[1,5,4])` || Generate a simple data plot ||
|| `>>> s.plot.data([[1,2,3],[1,2,3]], [[1,3,2],[4,1,3]])` || Generate a few data lines. ||
|| `>>> s.plot.function(spinmob.math.sin)` || Plot sin(x) ||
|| `>>> s.plot.function([spinmob.math.sin, spinmob.math.cos])` || Plot sin(x) and cos(x) ||
|| `>>> s.plot.tweaks.auto_zoom()` || Auto-scale the data. ||
|| `>>> s.plot.tweaks.ubertidy()` || Prepare the plot for presentation. (I save as ps or svg and use [http://www.inkscape.org/ Inkscape]) ||
|| `>>> def f(x,y): return x*x*y*y` || to define a 2-variable function ||
|| `>>> s.plot.surface_function(f,-1,1,-1,1)` || to make a 2-d color plot of this function. The GUI sliders are very useful, but look ugly in Linux. I have to overhaul them ||

more to come...