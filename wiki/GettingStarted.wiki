#summary A few things to try right away.
#labels Featured

= Install and Run =

(1) Install [http://www.python.org/ python], [http://www.scipy.org scipy and numpy], [http://matplotlib.sourceforge.net matplotlib], and [http://www.wxpython.org wxpython] (telling it to generate the tool scripts during install if possible). Then make a "spinmob" folder in your [SitePackages python site-packages] directory and stick the source files there. You can either swipe the latest version from google's fancy SVN server or get a less-frequently-updated version from the downloads section.

(2) [PyShell Start pyshell].

(3) `>>> import spinmob`

= A Few Commands to Hit the Ground Running =

In general, I tried to design this library so that everything running in the background starts with an underscore, such as "`_plotting`" or "`_numpy`". Everything the user (you) should play with does not. So essentially if there's something you want to do, try typing "spinmob." and navigating through the lists in pyshell to see what's available. There is additional functionality hidden in the underscore libraries but I have not tested these functions. They will make their way back into the main library as time progresses.

== Plotting ==

|| `>>> spinmob.plot.data([1,2,3],[1,5,4])` || Generate a simple data plot ||
|| `>>> spinmob.plot.data([[1,2,3],[1,2,3]], [[1,3,2],[4,1,3]])` || Generate a few data lines. ||
|| `>>> spinmob.plot.function(spinmob.math.sin)` || Plot sin(x) ||
|| `>>> spinmob.plot.function([spinmob.math.sin, spinmob.math.cos])` || Plot sin(x) and cos(x) ||
|| `>>> spinmob.plot.tweaks.auto_zoom()` || Auto-scale the data. ||
|| `>>> spinmob.plot.tweaks.ubertidy()` || Prepare the plot for presentation. (I save as ps or svg and use [http://www.inkscape.org/ Inkscape]) ||
|| `>>> def f(x,y): return x*x*y*y` || to define a 2-variable function ||
|| `>>> spinmob.plot.surface_function(f,-1,1,-1,1)` || to make a 2-d color plot of this function. The GUI sliders are very useful, but do not work so well in Linux yet. I have to overhaul them ||

== Data Analysis ==

By far the most useful part of this project is the data importing and analysis library. I need to write the documentation for the types of data files it can read and include a test file before I tackle this section.

If you want to play with the class, start by doing something like this:

{{{
>>> d = spinmob.data.standard()
>>> d.load_file()
}}}

to point an instance of this class at a data file. Then try `d[0]` to view the 0-th column, `d.columns`, for the full list, `d.header` for the header values, `d.c()`, `d.h()`, and things like `d.generate_new_column('2*c(0)', 'my column')` or `d.plot('2*c(0)', 'c(1)+c(2)')` to manipulate/plot the data. You can also save the manipulated data to a formatted ascii file with `d.save_file()`

Data files can have any delimiter (user-specified in `standard()`) and should have a format something like:

{{{
why_do_this        example_data_file
start_pressure     42
end_pressure       37.3
type_of_sweep      voltage
my_row_of_whatever 32 44 55 128 223 147
more_values        15.2 22 37.45 18

time voltage current other_stuff
1    32.1    27.0    1
2    33.2    27.1    0
3    32.5    27.2    1
4    44.2    27.3    x
5    22.2    27.4    3
6    11.1    x       5
7    77.232  27.4    
}}}

The default delimiter `standard()` is looking for is white space, either spaces or tabs, but you can specify any delimiter you like (i.e. comma for csv) when creating an instance of the object. White space will be stripped off the ends of values, numbers will be converted to floating point if possible, and strings are allowed as well. Empty lines are ignored, and lists of numbers will be converted into arrays. 

The only overall structural rule for data files, really, is that the header has to come first, and the data columns come last:

 * Header lines begin with strings and must come before the data columns.
 * Empty lines are ignored.
 * The first data row must be entirely comprised of numbers.
 * The columns can be different lengths or have placeholders with no data.

If you're using "white space" as your delimiter and you want an empty data value, you'll need to use a place holder because several tabs and/or spaces are read as one delimiter. Note the "other_stuff" column would be read in as `array[1,0,1,35]`, not `array[1,0,1,'x',3,5]`!

more to come...